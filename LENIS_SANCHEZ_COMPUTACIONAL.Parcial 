{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Lenis14183/QM206/blob/main/LENIS_SANCHEZ_COMPUTACIONAL.Parcial%20\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YhdIvLussZxi",
        "outputId": "2103bcde-7635-449c-e404-813cc4808382"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Molaridad de la solución de NaNO3: 1.4705882352941175 mol/L\n"
          ]
        }
      ],
      "source": [
        "import math\n",
        "\n",
        "# Problema 1: Función que calcula la molaridad de una solución\n",
        "# Parámetros: masa en gramos, peso molecular (g/mol), volumen en mL\n",
        "\n",
        "def calcularMolaridad(masa_soluto, peso_molecular, volumen_ml):\n",
        "    volumen_l = volumen_ml / 1000  # Conversión de mL a L\n",
        "    moles = masa_soluto / peso_molecular  # Cálculo de moles\n",
        "    return moles / volumen_l\n",
        "\n",
        "# Ejemplo #1: Cálculo de la molaridad para una solución de NaNO3\n",
        "molaridad1 = calcularMolaridad(25, 85.0, 200)\n",
        "print(f\"Molaridad de la solución de NaNO3: {molaridad1} mol/L\")\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import math\n",
        "\n",
        "# Problema 2: Función que calcula el pH de una solución de ácido fuerte\n",
        "# Parámetro: concentración de iones de hidrógeno [H+]\n",
        "\n",
        "def calcularPh(concentracionH):\n",
        "    return -math.log10(concentracionH)\n",
        "\n",
        "# Ejemplo #2: Cálculo del pH para una solución de ácido sulfúrico con concentración 0.008 M\n",
        "ph1 = calcularPh(0.008)\n",
        "print(f\"pH de la solución de H2SO4: {ph1}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "o1NV2H5Os5FB",
        "outputId": "8ea6267f-0549-40a1-d096-9b9cca29a2cc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "pH de la solución de H2SO4: 2.0969100130080562\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import math\n",
        "\n",
        "# Problema 3: Función que calcula la masa molar de un gas ideal\n",
        "# Parámetros: masa en gramos, volumen en mL, temperatura en °C, presión en atm\n",
        "\n",
        "def calcularMasaMolarGas(masa, volumen_ml, temperatura_c, presion_atm):\n",
        "    R = 0.0821  # Constante de gases en L·atm/(mol·K)\n",
        "    volumen_l = volumen_ml / 1000  # Convertir volumen de mL a L\n",
        "    temperatura_k = temperatura_c + 273.15  # Convertir temperatura a Kelvin\n",
        "    masa_molar = (masa * R * temperatura_k) / (presion_atm * volumen_l)\n",
        "    return masa_molar\n",
        "\n",
        "# Ejemplo #3: Cálculo de la masa molar para un gas con masa 0.8 g, volumen 500 mL, temperatura 20 °C y presión 0.9 atm\n",
        "masa_molar1 = calcularMasaMolarGas(0.8, 500, 20, 0.9)\n",
        "print(f\"Masa molar del gas: {masa_molar1} g/mol\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Z2pgj_qZxiZu",
        "outputId": "f9ffb236-6d41-4cc3-99b0-9a99f64d5b72"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Masa molar del gas: 42.78687111111111 g/mol\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import math\n",
        "\n",
        "# Problema 4: Función que calcula la concentración del ácido y la base conjugada para un buffer\n",
        "# Usando la ecuación de Henderson-Hasselbalch\n",
        "# Parámetros: pH deseado, Ka, volumen de la solución en mL\n",
        "\n",
        "def calcularConcentracionesBuffer(pH_deseado, Ka, volumen_ml, concentracion_total=0.4):\n",
        "    # Convertir Ka a pKa\n",
        "    pKa = -math.log10(Ka)\n",
        "\n",
        "    # Calcular la relación [Base] / [Ácido]\n",
        "    relacion_base_acido = 10 ** (pH_deseado - pKa)\n",
        "\n",
        "    # Calcular concentraciones de ácido y base\n",
        "    concentracion_acido = concentracion_total / (1 + relacion_base_acido)\n",
        "    concentracion_base = concentracion_acido * relacion_base_acido\n",
        "\n",
        "    # Ajuste de moles según el volumen dado\n",
        "    moles_acido = concentracion_acido * (volumen_ml / 1000)\n",
        "    moles_base = concentracion_base * (volumen_ml / 1000)\n",
        "\n",
        "    return concentracion_acido, concentracion_base, moles_acido, moles_base\n",
        "\n",
        "# Ejemplo #4: Buffer con pH 6.8, Ka = 3.5e-7 (ácido carbónico), volumen 180 mL\n",
        "concentracion_acido, concentracion_base, moles_acido, moles_base = calcularConcentracionesBuffer(6.8, 3.5e-7, 180)\n",
        "print(f\"Concentración de ácido: {concentracion_acido} M\")\n",
        "print(f\"Concentración de base conjugada: {concentracion_base} M\")\n",
        "print(f\"Moles de ácido: {moles_acido} mol\")\n",
        "print(f\"Moles de base conjugada: {moles_base} mol\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WzjtPad5xsiq",
        "outputId": "d4fe64d5-e4f0-4a80-d53e-500700aa8143"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Concentración de ácido: 0.12467464959231664 M\n",
            "Concentración de base conjugada: 0.2753253504076834 M\n",
            "Moles de ácido: 0.022441436926616994 mol\n",
            "Moles de base conjugada: 0.049558563073383015 mol\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Problema 5: Función que calcula la energía liberada en una reacción química\n",
        "# Parámetros: moles de reactivo (float), ΔH de formación en kJ/mol (float)\n",
        "\n",
        "def calcularEnergiaLiberada(moles_reactivo, deltaH_formacion):\n",
        "    return moles_reactivo * deltaH_formacion\n",
        "\n",
        "# Ejemplo #5: Cálculo de energía liberada para una reacción con 2 moles de etanol (ΔH = -1367 kJ/mol)\n",
        "energia_liberada = calcularEnergiaLiberada(2, -1367)\n",
        "print(f\"Energía liberada en la reacción: {energia_liberada} kJ\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NhegbnQHyvpx",
        "outputId": "8c2cc295-e46e-47c8-ea0e-3887463674f3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Energía liberada en la reacción: -2734 kJ\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Problema 6: Función que calcula el rendimiento porcentual de una reacción\n",
        "# Parámetros: masa teórica (float), masa experimental (float)\n",
        "\n",
        "def calcularRendimientoPorcentual(masa_teorica, masa_experimental):\n",
        "    return (masa_experimental / masa_teorica) * 100\n",
        "\n",
        "# Ejemplo #6: Rendimiento porcentual para una reacción con masa teórica de 8 g y masa experimental de 7.2 g\n",
        "rendimiento = calcularRendimientoPorcentual(8, 7.2)\n",
        "print(f\"Rendimiento porcentual: {rendimiento}%\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QVherMOdzNMz",
        "outputId": "9f434457-ea8e-4083-dcff-235322c2ddb0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Rendimiento porcentual: 90.0%\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Problema 7: Función que calcula el calor específico de un metal\n",
        "# Parámetros: masa (float) en gramos, delta de temperatura (float) en °C, calor absorbido (float) en Joules\n",
        "\n",
        "def calcularCalorEspecifico(masa, deltaT, calor_absorbido):\n",
        "    return calor_absorbido / (masa * deltaT)\n",
        "\n",
        "# Ejemplo #7: Calor específico de un metal con masa de 50 g, ΔT de 15°C, y calor absorbido de 375 J\n",
        "calor_especifico = calcularCalorEspecifico(50, 15, 375)\n",
        "print(f\"Calor específico del metal: {calor_especifico} J/g°C\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xTSlg9qlzjlY",
        "outputId": "bce67940-9030-432c-d784-6720df653f55"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Calor específico del metal: 0.5 J/g°C\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import math\n",
        "\n",
        "# Problema 8: Función que calcula la presión osmótica de una solución a 25°C\n",
        "# Parámetros: concentración (float) en g/L, peso molecular (float) del soluto en g/mol, temperatura en °C (25 por defecto)\n",
        "\n",
        "def calcularPresionOsmotica(concentracion_gL, peso_molecular, temperatura_C=25):\n",
        "    R = 0.0821  # constante de gases en atm·L/(mol·K)\n",
        "    # Convertir la concentración a mol/L\n",
        "    concentracion_molar = concentracion_gL / peso_molecular\n",
        "    # Convertir temperatura a Kelvin\n",
        "    temperatura_K = temperatura_C + 273.15\n",
        "    return concentracion_molar * R * temperatura_K\n",
        "\n",
        "# Ejemplo #8: Presión osmótica para una solución con 10 g/L de glucosa (PM = 180 g/mol)\n",
        "presion_osmotica = calcularPresionOsmotica(10, 180)\n",
        "print(f\"Presión osmótica: {presion_osmotica} atm\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2coXTbYL04t8",
        "outputId": "f7047302-161b-4997-b443-d30636884ea7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Presión osmótica: 1.3598952777777777 atm\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Problema 9: Función que calcula el producto de solubilidad (Kps) de una sal insoluble\n",
        "# Fórmula general para Hg2Cl2: Kps = s^2\n",
        "# Fórmula general para Al(OH)3: Kps = 27 * s^4\n",
        "# Parámetro: solubilidad en mol/L\n",
        "\n",
        "def calcularKps(solubilidad, compuesto):\n",
        "    if compuesto == \"Hg2Cl2\":\n",
        "        kps = solubilidad ** 2  # Para Hg2Cl2, Kps = s^2\n",
        "    elif compuesto == \"Al(OH)3\":\n",
        "        kps = 27 * (solubilidad ** 4)  # Para Al(OH)3, Kps = 27s^4\n",
        "    else:\n",
        "        raise ValueError(\"Compuesto no soportado. Usa 'Hg2Cl2' o 'Al(OH)3'.\")\n",
        "    return kps\n",
        "\n",
        "# Ejemplo #9: Cálculo de Kps para Hg2Cl2 con una solubilidad de 0.005 mol/L\n",
        "kps = calcularKps(0.005, \"Hg2Cl2\")\n",
        "print(f\"Kps de Hg2Cl2: {kps}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "34SlJI6t2m_S",
        "outputId": "5b48b860-97de-4c71-fc6d-e4c79419c467"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Kps de Hg2Cl2: 2.5e-05\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Problema 10: Función que grafica el pH en función del volumen de una solución titulante agregada\n",
        "# Parámetros: concentración del ácido, concentración de la base titulante, volumen inicial de ácido, volumen de base agregado por paso\n",
        "\n",
        "def grafica_titulacion(conc_acido, conc_base, volumen_acido, volumen_base_total, paso):\n",
        "    # Crear un rango de volúmenes agregados\n",
        "    vol_agregado = np.arange(0, volumen_base_total + paso, paso)\n",
        "\n",
        "    # Calcular el pH en cada punto de la titulación\n",
        "    pH = []\n",
        "    moles_acido = conc_acido * volumen_acido\n",
        "    for vol in vol_agregado:\n",
        "        moles_base = conc_base * vol\n",
        "        if moles_base < moles_acido:\n",
        "            # Calcular concentración de H+ remanente\n",
        "            conc_hplus = (moles_acido - moles_base) / (volumen_acido + vol)\n",
        "            pH.append(-np.log10(conc_hplus))\n",
        "        elif moles_base == moles_acido:\n",
        "            # Punto de equivalencia (pH = 7 para ácido fuerte y base fuerte)\n",
        "            pH.append(7.0)\n",
        "        else:\n",
        "            # Exceso de base\n",
        "            conc_ohminus = (moles_base - moles_acido) / (volumen_acido + vol)\n",
        "            pH.append(14 + np.log10(conc_ohminus))\n",
        "\n",
        "    # Crear un DataFrame para los datos\n",
        "    data = pd.DataFrame({\n",
        "        'Volumen de base agregado (mL)': vol_agregado,\n",
        "        'pH': pH\n",
        "    })\n",
        "\n",
        "    # Graficar pH vs volumen agregado\n",
        "    plt.figure(figsize=(10, 6))\n",
        "    plt.plot(data['Volumen de base agregado (mL)'], data['pH'], marker='o', color='purple')\n",
        "    plt.xlabel('Volumen de base agregado (mL)')\n",
        "    plt.ylabel('pH')\n",
        "    plt.title('Curva de titulación ácido-base')\n",
        "    plt.grid(True)\n",
        "    plt.show()\n",
        "\n",
        "    return data\n",
        "\n",
        "# Ejemplo #10: Titulación de 50 mL de HCl 0.1 M con NaOH 0.1 M, volumen total de base agregado de 60 mL, paso de 1 mL\n",
        "data = grafica_titulacion(0.1, 0.1, 50, 60, 1)\n",
        "print(data)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 807
        },
        "id": "ALmUSxBp2z3D",
        "outputId": "c43936ea-e99c-4b06-b499-d388df1d8f5e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "    Volumen de base agregado (mL)         pH\n",
            "0                               0   1.000000\n",
            "1                               1   1.017374\n",
            "2                               2   1.034762\n",
            "3                               3   1.052178\n",
            "4                               4   1.069636\n",
            "..                            ...        ...\n",
            "56                             56  11.752845\n",
            "57                             57  11.815714\n",
            "58                             58  11.869666\n",
            "59                             59  11.916816\n",
            "60                             60  11.958607\n",
            "\n",
            "[61 rows x 2 columns]\n"
          ]
        }
      ]
    }
  ]
}